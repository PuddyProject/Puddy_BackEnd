
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}



plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.1.0'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

}

group = 'com.team'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	runtimeOnly 'com.mysql:mysql-connector-j'

	//Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	//querydsl
//	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	//Lombok & Mapstruct
	implementation 'org.projectlombok:lombok:1.18.24'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//Swagger UI
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'

	//token
	implementation 'com.auth0:java-jwt:3.18.3'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'com.nimbusds:nimbus-jose-jwt:9.31'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'


	//S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//h2
	runtimeOnly 'com.h2database:h2'

}

tasks.named('test') {
	useJUnitPlatform()
}

// 추가
jar {
	enabled = false
}

clean {
	delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성 위치
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

//def frontendDir = "$projectDir/src/main/frontend"
//
//sourceSets {
//	main {
//		resources { srcDirs = ["$projectDir/src/main/resources"]
//		}
//	}
//}
//
//processResources { dependsOn "copyReactBuildFiles" }
//
//task installReact(type: Exec) {
//	workingDir "$frontendDir"
//	inputs.dir "$frontendDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "npm.cmd", "audit", "fix"
//		commandLine 'npm.cmd', 'install' }
//	else {
//		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
//	}
//}
//
//task buildReact(type: Exec) {
//	dependsOn "installReact"
//	workingDir "$frontendDir"
//	inputs.dir "$frontendDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "npm.cmd", "run-script", "build"
//	} else {
//		commandLine "npm", "run-script", "build"
//	}
//}
//
//task copyReactBuildFiles(type: Copy) {
//	dependsOn "buildReact"
//	from "$frontendDir/build"
//	into "$projectDir/src/main/resources/static"
//}